require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PingsController do
  # SetUp Devise LogIn
  login_user

  # SetUp it nested object association dependency
  before(:each) do
    login_user if @user.nil?

    # Nested objs
    @schedule = FactoryGirl.build(:schedule)
    @target = FactoryGirl.build(:target)

    # setup the target
    @target.user = @user
    @target.save

    # setup the schedule
    @schedule.target = @target
    @schedule.save
  end

  # This should return the minimal set of attributes required to create a valid
  # Ping. As you add validations to Ping, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { http_code: random_http_code, target_id: @target.id, schedule_id: @schedule.id } }

  describe "GET index" do
    it "assigns all pings as @pings" do
      ping = Ping.create! valid_attributes
      get :index, {target_id: @target.id, schedule_id: @schedule.id}
      assigns(:pings).should eq([ping])
    end
  end

  describe "GET history" do
    it "show all pings independent on the current user" do
      get :history, {}
      expect(response.status).to eq 200
    end
  end

  describe "GET show" do
    it "assigns the requested ping as @ping" do
      ping = Ping.create! valid_attributes
      get :show, {target_id: @target.id, schedule_id: @schedule.id, id:ping.to_param}
      assigns(:ping).should eq(ping)
    end
  end

  describe "GET new" do
    it "assigns a new ping as @ping" do
      get :new, {target_id: @target.id, schedule_id: @schedule.id}
      assigns(:ping).should be_a_new(Ping)
    end
  end

  describe "GET edit" do
    it "assigns the requested ping as @ping" do
      ping = Ping.create! valid_attributes
      get :edit, {target_id:@target.id, schedule_id:@schedule.id, id:ping.to_param}
      assigns(:ping).should eq(ping)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Ping" do
        expect {
          post :create, {target_id: @target.id, schedule_id: @schedule.id, ping:valid_attributes}
        }.to change(Ping, :count).by(1)
      end

      it "assigns a newly created ping as @ping" do
        post :create, {target_id: @target.id, schedule_id: @schedule.id, ping:valid_attributes}
        assigns(:ping).should be_a(Ping)
        assigns(:ping).should be_persisted
      end

      it "redirects to the created ping" do
        post :create, {target_id: @target.id, schedule_id: @schedule.id, ping:valid_attributes}
        response.should redirect_to([@target, @schedule, Ping.last])
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved ping as @ping" do
        # Trigger the behavior that occurs when invalid params are submitted
        Ping.any_instance.stub(:save).and_return(false)
        post :create, {target_id: @target.id, schedule_id: @schedule.id, ping:{ "http_code" => "invalid value" }}
        assigns(:ping).should be_a_new(Ping)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Ping.any_instance.stub(:save).and_return(false)
        post :create, {target_id: @target.id, schedule_id: @schedule.id, ping:{ "http_code" => "invalid value" }}
        response.should redirect_to(target_schedule_pings_url(@target, @schedule))
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested ping" do
        ping = Ping.create! valid_attributes
        # Assuming there are no other pings in the database, this
        # specifies that the Ping created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Ping.any_instance.should_receive(:update).with({ "http_code" => "" })
        put :update, {target_id: @target.id, schedule_id: @schedule.id, id:ping.to_param, ping:{ "http_code" => "" }}
      end

      it "assigns the requested ping as @ping" do
        ping = Ping.create! valid_attributes
        put :update, {target_id: @target.id, schedule_id: @schedule.id, id:ping.to_param, ping:valid_attributes}
        assigns(:ping).should eq(ping)
      end

      it "redirects to the ping" do
        ping = Ping.create! valid_attributes
        put :update, {target_id: @target.id, schedule_id: @schedule.id, id: ping.to_param, ping:valid_attributes}
        response.should redirect_to([@target, @schedule, ping])
      end
    end

    describe "with invalid params" do
      it "assigns the ping as @ping" do
        ping = Ping.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Ping.any_instance.stub(:save).and_return(false)
        put :update, {target_id: @target.id, schedule_id: @schedule.id, id:ping.to_param, ping:{ "http_code" => "invalid value" }}
        assigns(:ping).should eq(ping)
      end

      it "re-renders the 'edit' template" do
        ping = Ping.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Ping.any_instance.stub(:save).and_return(false)
        put :update, {target_id: @target.id, schedule_id: @schedule.id, id:ping.to_param, ping:{http_code: nil}}
        response.should redirect_to(target_schedule_ping_url(@target, @schedule, ping))
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested ping" do
      ping = Ping.create! valid_attributes
      expect {
        delete :destroy, {target_id: @target.id, schedule_id: @schedule.id, id: ping.id}
      }.to change(Ping, :count).by(-1)
    end

    it "redirects to the pings list" do
      ping = Ping.create! valid_attributes
      delete :destroy, {target_id: @target.id, schedule_id: @schedule.id, id: ping.to_param}
      response.should redirect_to(target_schedule_pings_url(@target, @schedule))
    end
  end

end
